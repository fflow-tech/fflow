// Code generated by 'yaegi extract github.com/fflow-tech/fflow-sdk-go/faas'. DO NOT EDIT.

package golang

import (
	"context"
	"github.com/fflow-tech/fflow-sdk-go/faas"
	"reflect"
)

func init() {
	Symbols["github.com/fflow-tech/fflow-sdk-go/faas/faas"] = map[string]reflect.Value{
		// type definitions
		"Context":  reflect.ValueOf((*faas.Context)(nil)),
		"Logger":   reflect.ValueOf((*faas.Logger)(nil)),
		"Metadata": reflect.ValueOf((*faas.Metadata)(nil)),
		"Storage":  reflect.ValueOf((*faas.Storage)(nil)),

		// interface wrapper definitions
		"_Context":  reflect.ValueOf((*_github_com_fflow-tech_fflow_sdk_go_faas_Context)(nil)),
		"_Logger":   reflect.ValueOf((*_github_com_fflow-tech_fflow_sdk_go_faas_Logger)(nil)),
		"_Metadata": reflect.ValueOf((*_github_com_fflow-tech_fflow_sdk_go_faas_Metadata)(nil)),
		"_Storage":  reflect.ValueOf((*_github_com_fflow-tech_fflow_sdk_go_faas_Storage)(nil)),
	}
}

// _github_com_fflow-tech_fflow_sdk_go_faas_Context is an interface wrapper for Context type
type _github_com_fflow-tech_fflow_sdk_go_faas_Context struct {
	IValue    interface{}
	WContext  func() context.Context
	WLogger   func() faas.Logger
	WLogs     func() []string
	WMetadata func() faas.Metadata
	WStorage  func() faas.Storage
}

func (W _github_com_fflow-tech_fflow_sdk_go_faas_Context) Context() context.Context {
	return W.WContext()
}
func (W _github_com_fflow-tech_fflow_sdk_go_faas_Context) Logger() faas.Logger {
	return W.WLogger()
}
func (W _github_com_fflow-tech_fflow_sdk_go_faas_Context) Logs() []string {
	return W.WLogs()
}
func (W _github_com_fflow-tech_fflow_sdk_go_faas_Context) Metadata() faas.Metadata {
	return W.WMetadata()
}
func (W _github_com_fflow-tech_fflow_sdk_go_faas_Context) Storage() faas.Storage {
	return W.WStorage()
}

// _github_com_fflow-tech_fflow_sdk_go_faas_Logger is an interface wrapper for Logger type
type _github_com_fflow-tech_fflow_sdk_go_faas_Logger struct {
	IValue  interface{}
	WDebugf func(message string, args ...any)
	WErrorf func(message string, args ...any)
	WInfof  func(message string, args ...any)
	WWarnf  func(message string, args ...any)
}

func (W _github_com_fflow-tech_fflow_sdk_go_faas_Logger) Debugf(message string, args ...any) {
	W.WDebugf(message, args...)
}
func (W _github_com_fflow-tech_fflow_sdk_go_faas_Logger) Errorf(message string, args ...any) {
	W.WErrorf(message, args...)
}
func (W _github_com_fflow-tech_fflow_sdk_go_faas_Logger) Infof(message string, args ...any) {
	W.WInfof(message, args...)
}
func (W _github_com_fflow-tech_fflow_sdk_go_faas_Logger) Warnf(message string, args ...any) {
	W.WWarnf(message, args...)
}

// _github_com_fflow-tech_fflow_sdk_go_faas_Metadata is an interface wrapper for Metadata type
type _github_com_fflow-tech_fflow_sdk_go_faas_Metadata struct {
	IValue     interface{}
	WAttribute func(key string) (any, error)
	WID        func() string
	WName      func() string
	WNamespace func() string
	WVersion   func() int
}

func (W _github_com_fflow-tech_fflow_sdk_go_faas_Metadata) Attribute(key string) (any, error) {
	return W.WAttribute(key)
}
func (W _github_com_fflow-tech_fflow_sdk_go_faas_Metadata) ID() string {
	return W.WID()
}
func (W _github_com_fflow-tech_fflow_sdk_go_faas_Metadata) Name() string {
	return W.WName()
}
func (W _github_com_fflow-tech_fflow_sdk_go_faas_Metadata) Namespace() string {
	return W.WNamespace()
}
func (W _github_com_fflow-tech_fflow_sdk_go_faas_Metadata) Version() int {
	return W.WVersion()
}

// _github_com_fflow-tech_fflow_sdk_go_faas_Storage is an interface wrapper for Storage type
type _github_com_fflow-tech_fflow_sdk_go_faas_Storage struct {
	IValue interface{}
	WDel   func(key string) error
	WGet   func(key string) (any, error)
	WSet   func(key string, value any, expireTime int64) error
}

func (W _github_com_fflow-tech_fflow_sdk_go_faas_Storage) Del(key string) error {
	return W.WDel(key)
}
func (W _github_com_fflow-tech_fflow_sdk_go_faas_Storage) Get(key string) (any, error) {
	return W.WGet(key)
}
func (W _github_com_fflow-tech_fflow_sdk_go_faas_Storage) Set(key string, value any, expireTime int64) error {
	return W.WSet(key, value, expireTime)
}

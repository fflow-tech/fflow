// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WorkflowClient is the client API for Workflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowClient interface {
	// CreateDef 创建工作流定义
	CreateDef(ctx context.Context, in *CreateDefReq, opts ...grpc.CallOption) (*CreateDefRsp, error)
	// UpdateDef 更新工作流定义
	UpdateDef(ctx context.Context, in *UpdateDefReq, opts ...grpc.CallOption) (*UpdateDefRsp, error)
	// GetDefDetail 获取工作流定义
	GetDefDetail(ctx context.Context, in *GetDefDetailReq, opts ...grpc.CallOption) (*GetDefDetailRsp, error)
	// EnableDef 激活工作流
	EnableDef(ctx context.Context, in *EnableDefReq, opts ...grpc.CallOption) (*EnableDefRsp, error)
	// DisableDef 去激活工作流
	DisableDef(ctx context.Context, in *DisableDefReq, opts ...grpc.CallOption) (*DisableDefRsp, error)
	// StartInst 启动流程实例
	StartInst(ctx context.Context, in *StartInstReq, opts ...grpc.CallOption) (*StartInstRsp, error)
	// CompleteInst 标记实例完成
	CompleteInst(ctx context.Context, in *CompleteInstReq, opts ...grpc.CallOption) (*CompleteInstRsp, error)
	// CancelInst 终止流程
	CancelInst(ctx context.Context, in *CancelInstReq, opts ...grpc.CallOption) (*CancelInstRsp, error)
	// PauseInst 暂停流程
	PauseInst(ctx context.Context, in *PauseInstReq, opts ...grpc.CallOption) (*PauseInstRsp, error)
	// ResumeInst 从暂停中恢复流程
	ResumeInst(ctx context.Context, in *ResumeInstReq, opts ...grpc.CallOption) (*ResumeInstRsp, error)
	// UpdateInstContext 更新实例环境参数
	UpdateInstContext(ctx context.Context, in *UpdateInstContextReq, opts ...grpc.CallOption) (*UpdateInstContextRsp, error)
	// GetInstDetail 获取流程实例运行状态
	GetInstDetail(ctx context.Context, in *GetInstDetailReq, opts ...grpc.CallOption) (*GetInstDetailRsp, error)
	// GetInstList 获取流程实例列表
	GetInstList(ctx context.Context, in *GetInstListReq, opts ...grpc.CallOption) (*GetInstListRsp, error)
	// RestartInst 从某个节点重跑实例, 没有设定节点的情况下就从最近失败的节点开始重跑
	RestartInst(ctx context.Context, in *RestartInstReq, opts ...grpc.CallOption) (*RestartInstRsp, error)
	// GetNodeInstDetail 获取节点实例信息
	GetNodeInstDetail(ctx context.Context, in *GetNodeInstDetailReq, opts ...grpc.CallOption) (*GetNodeInstDetailRsp, error)
	// SkipNode 跳过某节点
	// 如果当前节点已经被调度, 当前执行的节点实例不会被调过, 后续的如果再度调度到该节点才会被跳过
	SkipNode(ctx context.Context, in *SkipNodeReq, opts ...grpc.CallOption) (*SkipNodeRsp, error)
	// CancelSkipNode 恢复某节点(取消跳过)
	CancelSkipNode(ctx context.Context, in *CancelSkipNodeReq, opts ...grpc.CallOption) (*CancelSkipNodeRsp, error)
	// CompleteNode 标记节点结束
	CompleteNode(ctx context.Context, in *CompleteNodeReq, opts ...grpc.CallOption) (*CompleteNodeRsp, error)
	// CancelNode 终止指定节点的运行
	CancelNode(ctx context.Context, in *CancelNodeReq, opts ...grpc.CallOption) (*CancelNodeRsp, error)
	// RerunNode 重跑指定已运行节点
	RerunNode(ctx context.Context, in *RerunNodeReq, opts ...grpc.CallOption) (*RerunNodeRsp, error)
	// ResumeNode 从等待状态恢复节点执行
	ResumeNode(ctx context.Context, in *ResumeNodeReq, opts ...grpc.CallOption) (*ResumeNodeRsp, error)
}

type workflowClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowClient(cc grpc.ClientConnInterface) WorkflowClient {
	return &workflowClient{cc}
}

func (c *workflowClient) CreateDef(ctx context.Context, in *CreateDefReq, opts ...grpc.CallOption) (*CreateDefRsp, error) {
	out := new(CreateDefRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/CreateDef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) UpdateDef(ctx context.Context, in *UpdateDefReq, opts ...grpc.CallOption) (*UpdateDefRsp, error) {
	out := new(UpdateDefRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/UpdateDef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) GetDefDetail(ctx context.Context, in *GetDefDetailReq, opts ...grpc.CallOption) (*GetDefDetailRsp, error) {
	out := new(GetDefDetailRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/GetDefDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) EnableDef(ctx context.Context, in *EnableDefReq, opts ...grpc.CallOption) (*EnableDefRsp, error) {
	out := new(EnableDefRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/EnableDef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) DisableDef(ctx context.Context, in *DisableDefReq, opts ...grpc.CallOption) (*DisableDefRsp, error) {
	out := new(DisableDefRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/DisableDef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) StartInst(ctx context.Context, in *StartInstReq, opts ...grpc.CallOption) (*StartInstRsp, error) {
	out := new(StartInstRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/StartInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) CompleteInst(ctx context.Context, in *CompleteInstReq, opts ...grpc.CallOption) (*CompleteInstRsp, error) {
	out := new(CompleteInstRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/CompleteInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) CancelInst(ctx context.Context, in *CancelInstReq, opts ...grpc.CallOption) (*CancelInstRsp, error) {
	out := new(CancelInstRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/CancelInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) PauseInst(ctx context.Context, in *PauseInstReq, opts ...grpc.CallOption) (*PauseInstRsp, error) {
	out := new(PauseInstRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/PauseInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ResumeInst(ctx context.Context, in *ResumeInstReq, opts ...grpc.CallOption) (*ResumeInstRsp, error) {
	out := new(ResumeInstRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/ResumeInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) UpdateInstContext(ctx context.Context, in *UpdateInstContextReq, opts ...grpc.CallOption) (*UpdateInstContextRsp, error) {
	out := new(UpdateInstContextRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/UpdateInstContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) GetInstDetail(ctx context.Context, in *GetInstDetailReq, opts ...grpc.CallOption) (*GetInstDetailRsp, error) {
	out := new(GetInstDetailRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/GetInstDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) GetInstList(ctx context.Context, in *GetInstListReq, opts ...grpc.CallOption) (*GetInstListRsp, error) {
	out := new(GetInstListRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/GetInstList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) RestartInst(ctx context.Context, in *RestartInstReq, opts ...grpc.CallOption) (*RestartInstRsp, error) {
	out := new(RestartInstRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/RestartInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) GetNodeInstDetail(ctx context.Context, in *GetNodeInstDetailReq, opts ...grpc.CallOption) (*GetNodeInstDetailRsp, error) {
	out := new(GetNodeInstDetailRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/GetNodeInstDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) SkipNode(ctx context.Context, in *SkipNodeReq, opts ...grpc.CallOption) (*SkipNodeRsp, error) {
	out := new(SkipNodeRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/SkipNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) CancelSkipNode(ctx context.Context, in *CancelSkipNodeReq, opts ...grpc.CallOption) (*CancelSkipNodeRsp, error) {
	out := new(CancelSkipNodeRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/CancelSkipNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) CompleteNode(ctx context.Context, in *CompleteNodeReq, opts ...grpc.CallOption) (*CompleteNodeRsp, error) {
	out := new(CompleteNodeRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/CompleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) CancelNode(ctx context.Context, in *CancelNodeReq, opts ...grpc.CallOption) (*CancelNodeRsp, error) {
	out := new(CancelNodeRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/CancelNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) RerunNode(ctx context.Context, in *RerunNodeReq, opts ...grpc.CallOption) (*RerunNodeRsp, error) {
	out := new(RerunNodeRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/RerunNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ResumeNode(ctx context.Context, in *ResumeNodeReq, opts ...grpc.CallOption) (*ResumeNodeRsp, error) {
	out := new(ResumeNodeRsp)
	err := c.cc.Invoke(ctx, "/engine.Workflow/ResumeNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowServer is the server API for Workflow service.
// All implementations must embed UnimplementedWorkflowServer
// for forward compatibility
type WorkflowServer interface {
	// CreateDef 创建工作流定义
	CreateDef(context.Context, *CreateDefReq) (*CreateDefRsp, error)
	// UpdateDef 更新工作流定义
	UpdateDef(context.Context, *UpdateDefReq) (*UpdateDefRsp, error)
	// GetDefDetail 获取工作流定义
	GetDefDetail(context.Context, *GetDefDetailReq) (*GetDefDetailRsp, error)
	// EnableDef 激活工作流
	EnableDef(context.Context, *EnableDefReq) (*EnableDefRsp, error)
	// DisableDef 去激活工作流
	DisableDef(context.Context, *DisableDefReq) (*DisableDefRsp, error)
	// StartInst 启动流程实例
	StartInst(context.Context, *StartInstReq) (*StartInstRsp, error)
	// CompleteInst 标记实例完成
	CompleteInst(context.Context, *CompleteInstReq) (*CompleteInstRsp, error)
	// CancelInst 终止流程
	CancelInst(context.Context, *CancelInstReq) (*CancelInstRsp, error)
	// PauseInst 暂停流程
	PauseInst(context.Context, *PauseInstReq) (*PauseInstRsp, error)
	// ResumeInst 从暂停中恢复流程
	ResumeInst(context.Context, *ResumeInstReq) (*ResumeInstRsp, error)
	// UpdateInstContext 更新实例环境参数
	UpdateInstContext(context.Context, *UpdateInstContextReq) (*UpdateInstContextRsp, error)
	// GetInstDetail 获取流程实例运行状态
	GetInstDetail(context.Context, *GetInstDetailReq) (*GetInstDetailRsp, error)
	// GetInstList 获取流程实例列表
	GetInstList(context.Context, *GetInstListReq) (*GetInstListRsp, error)
	// RestartInst 从某个节点重跑实例, 没有设定节点的情况下就从最近失败的节点开始重跑
	RestartInst(context.Context, *RestartInstReq) (*RestartInstRsp, error)
	// GetNodeInstDetail 获取节点实例信息
	GetNodeInstDetail(context.Context, *GetNodeInstDetailReq) (*GetNodeInstDetailRsp, error)
	// SkipNode 跳过某节点
	// 如果当前节点已经被调度, 当前执行的节点实例不会被调过, 后续的如果再度调度到该节点才会被跳过
	SkipNode(context.Context, *SkipNodeReq) (*SkipNodeRsp, error)
	// CancelSkipNode 恢复某节点(取消跳过)
	CancelSkipNode(context.Context, *CancelSkipNodeReq) (*CancelSkipNodeRsp, error)
	// CompleteNode 标记节点结束
	CompleteNode(context.Context, *CompleteNodeReq) (*CompleteNodeRsp, error)
	// CancelNode 终止指定节点的运行
	CancelNode(context.Context, *CancelNodeReq) (*CancelNodeRsp, error)
	// RerunNode 重跑指定已运行节点
	RerunNode(context.Context, *RerunNodeReq) (*RerunNodeRsp, error)
	// ResumeNode 从等待状态恢复节点执行
	ResumeNode(context.Context, *ResumeNodeReq) (*ResumeNodeRsp, error)
	mustEmbedUnimplementedWorkflowServer()
}

// UnimplementedWorkflowServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowServer struct {
}

func (UnimplementedWorkflowServer) CreateDef(context.Context, *CreateDefReq) (*CreateDefRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDef not implemented")
}
func (UnimplementedWorkflowServer) UpdateDef(context.Context, *UpdateDefReq) (*UpdateDefRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDef not implemented")
}
func (UnimplementedWorkflowServer) GetDefDetail(context.Context, *GetDefDetailReq) (*GetDefDetailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefDetail not implemented")
}
func (UnimplementedWorkflowServer) EnableDef(context.Context, *EnableDefReq) (*EnableDefRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableDef not implemented")
}
func (UnimplementedWorkflowServer) DisableDef(context.Context, *DisableDefReq) (*DisableDefRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableDef not implemented")
}
func (UnimplementedWorkflowServer) StartInst(context.Context, *StartInstReq) (*StartInstRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartInst not implemented")
}
func (UnimplementedWorkflowServer) CompleteInst(context.Context, *CompleteInstReq) (*CompleteInstRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteInst not implemented")
}
func (UnimplementedWorkflowServer) CancelInst(context.Context, *CancelInstReq) (*CancelInstRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelInst not implemented")
}
func (UnimplementedWorkflowServer) PauseInst(context.Context, *PauseInstReq) (*PauseInstRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseInst not implemented")
}
func (UnimplementedWorkflowServer) ResumeInst(context.Context, *ResumeInstReq) (*ResumeInstRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeInst not implemented")
}
func (UnimplementedWorkflowServer) UpdateInstContext(context.Context, *UpdateInstContextReq) (*UpdateInstContextRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstContext not implemented")
}
func (UnimplementedWorkflowServer) GetInstDetail(context.Context, *GetInstDetailReq) (*GetInstDetailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstDetail not implemented")
}
func (UnimplementedWorkflowServer) GetInstList(context.Context, *GetInstListReq) (*GetInstListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstList not implemented")
}
func (UnimplementedWorkflowServer) RestartInst(context.Context, *RestartInstReq) (*RestartInstRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartInst not implemented")
}
func (UnimplementedWorkflowServer) GetNodeInstDetail(context.Context, *GetNodeInstDetailReq) (*GetNodeInstDetailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInstDetail not implemented")
}
func (UnimplementedWorkflowServer) SkipNode(context.Context, *SkipNodeReq) (*SkipNodeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkipNode not implemented")
}
func (UnimplementedWorkflowServer) CancelSkipNode(context.Context, *CancelSkipNodeReq) (*CancelSkipNodeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSkipNode not implemented")
}
func (UnimplementedWorkflowServer) CompleteNode(context.Context, *CompleteNodeReq) (*CompleteNodeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteNode not implemented")
}
func (UnimplementedWorkflowServer) CancelNode(context.Context, *CancelNodeReq) (*CancelNodeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelNode not implemented")
}
func (UnimplementedWorkflowServer) RerunNode(context.Context, *RerunNodeReq) (*RerunNodeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RerunNode not implemented")
}
func (UnimplementedWorkflowServer) ResumeNode(context.Context, *ResumeNodeReq) (*ResumeNodeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeNode not implemented")
}
func (UnimplementedWorkflowServer) mustEmbedUnimplementedWorkflowServer() {}

// UnsafeWorkflowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowServer will
// result in compilation errors.
type UnsafeWorkflowServer interface {
	mustEmbedUnimplementedWorkflowServer()
}

func RegisterWorkflowServer(s grpc.ServiceRegistrar, srv WorkflowServer) {
	s.RegisterService(&_Workflow_serviceDesc, srv)
}

func _Workflow_CreateDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDefReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).CreateDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/CreateDef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).CreateDef(ctx, req.(*CreateDefReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_UpdateDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDefReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).UpdateDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/UpdateDef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).UpdateDef(ctx, req.(*UpdateDefReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_GetDefDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).GetDefDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/GetDefDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).GetDefDetail(ctx, req.(*GetDefDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_EnableDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableDefReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).EnableDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/EnableDef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).EnableDef(ctx, req.(*EnableDefReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_DisableDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableDefReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).DisableDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/DisableDef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).DisableDef(ctx, req.(*DisableDefReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_StartInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartInstReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).StartInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/StartInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).StartInst(ctx, req.(*StartInstReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_CompleteInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteInstReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).CompleteInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/CompleteInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).CompleteInst(ctx, req.(*CompleteInstReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_CancelInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelInstReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).CancelInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/CancelInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).CancelInst(ctx, req.(*CancelInstReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_PauseInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseInstReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).PauseInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/PauseInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).PauseInst(ctx, req.(*PauseInstReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ResumeInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeInstReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ResumeInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/ResumeInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ResumeInst(ctx, req.(*ResumeInstReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_UpdateInstContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstContextReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).UpdateInstContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/UpdateInstContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).UpdateInstContext(ctx, req.(*UpdateInstContextReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_GetInstDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).GetInstDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/GetInstDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).GetInstDetail(ctx, req.(*GetInstDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_GetInstList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).GetInstList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/GetInstList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).GetInstList(ctx, req.(*GetInstListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_RestartInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartInstReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).RestartInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/RestartInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).RestartInst(ctx, req.(*RestartInstReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_GetNodeInstDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeInstDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).GetNodeInstDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/GetNodeInstDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).GetNodeInstDetail(ctx, req.(*GetNodeInstDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_SkipNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkipNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).SkipNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/SkipNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).SkipNode(ctx, req.(*SkipNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_CancelSkipNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSkipNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).CancelSkipNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/CancelSkipNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).CancelSkipNode(ctx, req.(*CancelSkipNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_CompleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).CompleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/CompleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).CompleteNode(ctx, req.(*CompleteNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_CancelNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).CancelNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/CancelNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).CancelNode(ctx, req.(*CancelNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_RerunNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RerunNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).RerunNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/RerunNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).RerunNode(ctx, req.(*RerunNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ResumeNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ResumeNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Workflow/ResumeNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ResumeNode(ctx, req.(*ResumeNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Workflow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "engine.Workflow",
	HandlerType: (*WorkflowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDef",
			Handler:    _Workflow_CreateDef_Handler,
		},
		{
			MethodName: "UpdateDef",
			Handler:    _Workflow_UpdateDef_Handler,
		},
		{
			MethodName: "GetDefDetail",
			Handler:    _Workflow_GetDefDetail_Handler,
		},
		{
			MethodName: "EnableDef",
			Handler:    _Workflow_EnableDef_Handler,
		},
		{
			MethodName: "DisableDef",
			Handler:    _Workflow_DisableDef_Handler,
		},
		{
			MethodName: "StartInst",
			Handler:    _Workflow_StartInst_Handler,
		},
		{
			MethodName: "CompleteInst",
			Handler:    _Workflow_CompleteInst_Handler,
		},
		{
			MethodName: "CancelInst",
			Handler:    _Workflow_CancelInst_Handler,
		},
		{
			MethodName: "PauseInst",
			Handler:    _Workflow_PauseInst_Handler,
		},
		{
			MethodName: "ResumeInst",
			Handler:    _Workflow_ResumeInst_Handler,
		},
		{
			MethodName: "UpdateInstContext",
			Handler:    _Workflow_UpdateInstContext_Handler,
		},
		{
			MethodName: "GetInstDetail",
			Handler:    _Workflow_GetInstDetail_Handler,
		},
		{
			MethodName: "GetInstList",
			Handler:    _Workflow_GetInstList_Handler,
		},
		{
			MethodName: "RestartInst",
			Handler:    _Workflow_RestartInst_Handler,
		},
		{
			MethodName: "GetNodeInstDetail",
			Handler:    _Workflow_GetNodeInstDetail_Handler,
		},
		{
			MethodName: "SkipNode",
			Handler:    _Workflow_SkipNode_Handler,
		},
		{
			MethodName: "CancelSkipNode",
			Handler:    _Workflow_CancelSkipNode_Handler,
		},
		{
			MethodName: "CompleteNode",
			Handler:    _Workflow_CompleteNode_Handler,
		},
		{
			MethodName: "CancelNode",
			Handler:    _Workflow_CancelNode_Handler,
		},
		{
			MethodName: "RerunNode",
			Handler:    _Workflow_RerunNode_Handler,
		},
		{
			MethodName: "ResumeNode",
			Handler:    _Workflow_ResumeNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflow.proto",
}

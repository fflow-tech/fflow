// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: workflow.proto

package engine

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// CreateDef 创建工作流定义
type CreateDefReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	Name     string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`       // [必填] 流程定义名称
	Desc     string    `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`       // [可选] 流程描述
	Author   string    `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`   // [必填] 流程作者
	Content  string    `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"` // [必填] 流程定义内容
}

func (x *CreateDefReq) Reset() {
	*x = CreateDefReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDefReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDefReq) ProtoMessage() {}

func (x *CreateDefReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDefReq.ProtoReflect.Descriptor instead.
func (*CreateDefReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDefReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *CreateDefReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDefReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CreateDefReq) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *CreateDefReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CreateDefRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp *BasicRsp `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
	DefID    string    `protobuf:"bytes,2,opt,name=defID,proto3" json:"defID,omitempty"` // 流程定义ID
}

func (x *CreateDefRsp) Reset() {
	*x = CreateDefRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDefRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDefRsp) ProtoMessage() {}

func (x *CreateDefRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDefRsp.ProtoReflect.Descriptor instead.
func (*CreateDefRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDefRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

func (x *CreateDefRsp) GetDefID() string {
	if x != nil {
		return x.DefID
	}
	return ""
}

// UpdateDef 更新工作流定义
type UpdateDefReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	DefID    string    `protobuf:"bytes,2,opt,name=defID,proto3" json:"defID,omitempty"`     // [必填] 待修改的流程定义ID
	Content  string    `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"` // [必填] 流程定义内容
	Author   string    `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`   // [必填] 作者
	Desc     string    `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`       // [可选] 流程描述
}

func (x *UpdateDefReq) Reset() {
	*x = UpdateDefReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDefReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDefReq) ProtoMessage() {}

func (x *UpdateDefReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDefReq.ProtoReflect.Descriptor instead.
func (*UpdateDefReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateDefReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *UpdateDefReq) GetDefID() string {
	if x != nil {
		return x.DefID
	}
	return ""
}

func (x *UpdateDefReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateDefReq) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *UpdateDefReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type UpdateDefRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp *BasicRsp `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
}

func (x *UpdateDefRsp) Reset() {
	*x = UpdateDefRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDefRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDefRsp) ProtoMessage() {}

func (x *UpdateDefRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDefRsp.ProtoReflect.Descriptor instead.
func (*UpdateDefRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateDefRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

// GetDefDetail 获取工作流定义
type GetDefDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	DefID    string    `protobuf:"bytes,2,opt,name=defID,proto3" json:"defID,omitempty"` // [必填] 流程定义ID
}

func (x *GetDefDetailReq) Reset() {
	*x = GetDefDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefDetailReq) ProtoMessage() {}

func (x *GetDefDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefDetailReq.ProtoReflect.Descriptor instead.
func (*GetDefDetailReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{4}
}

func (x *GetDefDetailReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *GetDefDetailReq) GetDefID() string {
	if x != nil {
		return x.DefID
	}
	return ""
}

type GetDefDetailRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp    *BasicRsp    `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
	WorkflowDef *WorkflowDef `protobuf:"bytes,2,opt,name=workflowDef,proto3" json:"workflowDef,omitempty"`
}

func (x *GetDefDetailRsp) Reset() {
	*x = GetDefDetailRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefDetailRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefDetailRsp) ProtoMessage() {}

func (x *GetDefDetailRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefDetailRsp.ProtoReflect.Descriptor instead.
func (*GetDefDetailRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{5}
}

func (x *GetDefDetailRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

func (x *GetDefDetailRsp) GetWorkflowDef() *WorkflowDef {
	if x != nil {
		return x.WorkflowDef
	}
	return nil
}

// WorkflowDef 工作流定义
type WorkflowDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`          // 流程名称
	Desc     string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`          // 流程描述
	Author   string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`      // 修改人
	Format   string `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"`      // 文件格式
	Content  string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`    // 文件内容
	CreateAt int64  `protobuf:"varint,6,opt,name=createAt,proto3" json:"createAt,omitempty"` // 创建时间，unixSec时间戳（毫秒）
	UpdateAt int64  `protobuf:"varint,7,opt,name=updateAt,proto3" json:"updateAt,omitempty"` // 更新时间，unixSec时间戳（毫秒）
	Status   string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`      // 流程状态
}

func (x *WorkflowDef) Reset() {
	*x = WorkflowDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowDef) ProtoMessage() {}

func (x *WorkflowDef) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowDef.ProtoReflect.Descriptor instead.
func (*WorkflowDef) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{6}
}

func (x *WorkflowDef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowDef) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *WorkflowDef) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *WorkflowDef) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *WorkflowDef) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *WorkflowDef) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *WorkflowDef) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *WorkflowDef) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// EnableDef 激活工作流
type EnableDefReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	DefID    string    `protobuf:"bytes,2,opt,name=defID,proto3" json:"defID,omitempty"` // [必填] 流程定义ID
}

func (x *EnableDefReq) Reset() {
	*x = EnableDefReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableDefReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableDefReq) ProtoMessage() {}

func (x *EnableDefReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableDefReq.ProtoReflect.Descriptor instead.
func (*EnableDefReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{7}
}

func (x *EnableDefReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *EnableDefReq) GetDefID() string {
	if x != nil {
		return x.DefID
	}
	return ""
}

type EnableDefRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp *BasicRsp `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
}

func (x *EnableDefRsp) Reset() {
	*x = EnableDefRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableDefRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableDefRsp) ProtoMessage() {}

func (x *EnableDefRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableDefRsp.ProtoReflect.Descriptor instead.
func (*EnableDefRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{8}
}

func (x *EnableDefRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

// DisableDef 去激活工作流
type DisableDefReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	DefID    string    `protobuf:"bytes,2,opt,name=defID,proto3" json:"defID,omitempty"` // [必填] 流程定义ID
}

func (x *DisableDefReq) Reset() {
	*x = DisableDefReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableDefReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableDefReq) ProtoMessage() {}

func (x *DisableDefReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableDefReq.ProtoReflect.Descriptor instead.
func (*DisableDefReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{9}
}

func (x *DisableDefReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *DisableDefReq) GetDefID() string {
	if x != nil {
		return x.DefID
	}
	return ""
}

type DisableDefRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp *BasicRsp `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
}

func (x *DisableDefRsp) Reset() {
	*x = DisableDefRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableDefRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableDefRsp) ProtoMessage() {}

func (x *DisableDefRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableDefRsp.ProtoReflect.Descriptor instead.
func (*DisableDefRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{10}
}

func (x *DisableDefRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

// StartInst 启动流程实例
type StartInstReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq  *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	DefID     string    `protobuf:"bytes,2,opt,name=defID,proto3" json:"defID,omitempty"`          // [必填] 流程定义ID
	InstName  string    `protobuf:"bytes,3,opt,name=instName,proto3" json:"instName,omitempty"`    // [必填] 流程实例名称
	Input     string    `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`          // [可选] 流程入参, json字符串
	DebugMode bool      `protobuf:"varint,5,opt,name=debugMode,proto3" json:"debugMode,omitempty"` // [可选] 是否已调试模式启动
}

func (x *StartInstReq) Reset() {
	*x = StartInstReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartInstReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartInstReq) ProtoMessage() {}

func (x *StartInstReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartInstReq.ProtoReflect.Descriptor instead.
func (*StartInstReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{11}
}

func (x *StartInstReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *StartInstReq) GetDefID() string {
	if x != nil {
		return x.DefID
	}
	return ""
}

func (x *StartInstReq) GetInstName() string {
	if x != nil {
		return x.InstName
	}
	return ""
}

func (x *StartInstReq) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *StartInstReq) GetDebugMode() bool {
	if x != nil {
		return x.DebugMode
	}
	return false
}

type StartInstRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp *BasicRsp `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
	InstID   string    `protobuf:"bytes,2,opt,name=instID,proto3" json:"instID,omitempty"` // [必填] 流程实例ID
}

func (x *StartInstRsp) Reset() {
	*x = StartInstRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartInstRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartInstRsp) ProtoMessage() {}

func (x *StartInstRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartInstRsp.ProtoReflect.Descriptor instead.
func (*StartInstRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{12}
}

func (x *StartInstRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

func (x *StartInstRsp) GetInstID() string {
	if x != nil {
		return x.InstID
	}
	return ""
}

// GetInstDetail 获取流程实例运行状态
type GetInstDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	InstID   string    `protobuf:"bytes,2,opt,name=instID,proto3" json:"instID,omitempty"` // [必填] 流程实例ID
}

func (x *GetInstDetailReq) Reset() {
	*x = GetInstDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstDetailReq) ProtoMessage() {}

func (x *GetInstDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstDetailReq.ProtoReflect.Descriptor instead.
func (*GetInstDetailReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{13}
}

func (x *GetInstDetailReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *GetInstDetailReq) GetInstID() string {
	if x != nil {
		return x.InstID
	}
	return ""
}

type GetInstDetailRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp    *BasicRsp   `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
	Name        string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                 // 实例名称
	DefID       string      `protobuf:"bytes,3,opt,name=defID,proto3" json:"defID,omitempty"`               // 工作流定义ID
	InstID      string      `protobuf:"bytes,4,opt,name=instID,proto3" json:"instID,omitempty"`             // 流程ID
	Input       string      `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`               // 工作流入参
	Status      string      `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`             // 工作流状态
	Creator     string      `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`           // 工作流操作者
	NodeItems   []*NodeItem `protobuf:"bytes,8,rep,name=nodeItems,proto3" json:"nodeItems,omitempty"`       // 节点状态信息
	StartAt     int64       `protobuf:"varint,9,opt,name=startAt,proto3" json:"startAt,omitempty"`          // 开始运行时间，unixSec时间戳（毫秒）
	CompletedAt int64       `protobuf:"varint,10,opt,name=completedAt,proto3" json:"completedAt,omitempty"` // 结束运行时间，unixSec时间戳（毫秒）
	CostTime    int64       `protobuf:"varint,11,opt,name=costTime,proto3" json:"costTime,omitempty"`       // 耗费时间，unixSec时间戳（毫秒）
	CurNodes    []string    `protobuf:"bytes,12,rep,name=curNodes,proto3" json:"curNodes,omitempty"`        // 当前节点
}

func (x *GetInstDetailRsp) Reset() {
	*x = GetInstDetailRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstDetailRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstDetailRsp) ProtoMessage() {}

func (x *GetInstDetailRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstDetailRsp.ProtoReflect.Descriptor instead.
func (*GetInstDetailRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{14}
}

func (x *GetInstDetailRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

func (x *GetInstDetailRsp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetInstDetailRsp) GetDefID() string {
	if x != nil {
		return x.DefID
	}
	return ""
}

func (x *GetInstDetailRsp) GetInstID() string {
	if x != nil {
		return x.InstID
	}
	return ""
}

func (x *GetInstDetailRsp) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *GetInstDetailRsp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetInstDetailRsp) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *GetInstDetailRsp) GetNodeItems() []*NodeItem {
	if x != nil {
		return x.NodeItems
	}
	return nil
}

func (x *GetInstDetailRsp) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *GetInstDetailRsp) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *GetInstDetailRsp) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

func (x *GetInstDetailRsp) GetCurNodes() []string {
	if x != nil {
		return x.CurNodes
	}
	return nil
}

// NodeItem 节点的信息
type NodeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstID     string `protobuf:"bytes,1,opt,name=instID,proto3" json:"instID,omitempty"`         // 节点实例ID
	Status     string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`         // 状态
	Input      string `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`           // 入参
	Output     string `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`         // 出参
	PollInput  string `protobuf:"bytes,5,opt,name=pollInput,proto3" json:"pollInput,omitempty"`   // 轮询接口的入参
	PollOutput string `protobuf:"bytes,6,opt,name=pollOutput,proto3" json:"pollOutput,omitempty"` // 轮询接口的输出
	// Deprecated: Do not use.
	InputSchema string `protobuf:"bytes,7,opt,name=inputSchema,proto3" json:"inputSchema,omitempty"` // 入参格式, 已废弃不再使用
	// Deprecated: Do not use.
	OutputSchema string `protobuf:"bytes,8,opt,name=outputSchema,proto3" json:"outputSchema,omitempty"` // 出参格式, 已废弃不再使用
	// Deprecated: Do not use.
	PollInputSchema string `protobuf:"bytes,9,opt,name=pollInputSchema,proto3" json:"pollInputSchema,omitempty"` // 轮询入参格式, 已废弃不再使用
	// Deprecated: Do not use.
	PollOutputSchema string   `protobuf:"bytes,10,opt,name=pollOutputSchema,proto3" json:"pollOutputSchema,omitempty"` // 轮询出参格式, 已废弃不再使用
	NodeRefName      string   `protobuf:"bytes,11,opt,name=nodeRefName,proto3" json:"nodeRefName,omitempty"`           // 节点引用标识
	Name             string   `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`                         // 节点名称
	Type             string   `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty"`                         // 节点类型
	Biz              string   `protobuf:"bytes,14,opt,name=biz,proto3" json:"biz,omitempty"`                           // 业务自定义配置，json格式
	StartAt          int64    `protobuf:"varint,15,opt,name=startAt,proto3" json:"startAt,omitempty"`                  // 开始运行时间，unixSec时间戳（毫秒）
	CompletedAt      int64    `protobuf:"varint,16,opt,name=completedAt,proto3" json:"completedAt,omitempty"`          // 结束运行时间，unixSec时间戳（毫秒）
	Seq              int32    `protobuf:"varint,17,opt,name=seq,proto3" json:"seq,omitempty"`                          // 顺序号
	Nexts            []string `protobuf:"bytes,18,rep,name=nexts,proto3" json:"nexts,omitempty"`                       // 节点多有可能后续节点的引用名称
	Parents          []string `protobuf:"bytes,19,rep,name=parents,proto3" json:"parents,omitempty"`                   // 节点所有可能父节点的引用名称
	CostTime         int64    `protobuf:"varint,20,opt,name=costTime,proto3" json:"costTime,omitempty"`                // 耗费时间，以毫秒为单位
	Url              string   `protobuf:"bytes,21,opt,name=url,proto3" json:"url,omitempty"`                           // 节点相关链接地址，如蓝盾构建地址
}

func (x *NodeItem) Reset() {
	*x = NodeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeItem) ProtoMessage() {}

func (x *NodeItem) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeItem.ProtoReflect.Descriptor instead.
func (*NodeItem) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{15}
}

func (x *NodeItem) GetInstID() string {
	if x != nil {
		return x.InstID
	}
	return ""
}

func (x *NodeItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NodeItem) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *NodeItem) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *NodeItem) GetPollInput() string {
	if x != nil {
		return x.PollInput
	}
	return ""
}

func (x *NodeItem) GetPollOutput() string {
	if x != nil {
		return x.PollOutput
	}
	return ""
}

// Deprecated: Do not use.
func (x *NodeItem) GetInputSchema() string {
	if x != nil {
		return x.InputSchema
	}
	return ""
}

// Deprecated: Do not use.
func (x *NodeItem) GetOutputSchema() string {
	if x != nil {
		return x.OutputSchema
	}
	return ""
}

// Deprecated: Do not use.
func (x *NodeItem) GetPollInputSchema() string {
	if x != nil {
		return x.PollInputSchema
	}
	return ""
}

// Deprecated: Do not use.
func (x *NodeItem) GetPollOutputSchema() string {
	if x != nil {
		return x.PollOutputSchema
	}
	return ""
}

func (x *NodeItem) GetNodeRefName() string {
	if x != nil {
		return x.NodeRefName
	}
	return ""
}

func (x *NodeItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NodeItem) GetBiz() string {
	if x != nil {
		return x.Biz
	}
	return ""
}

func (x *NodeItem) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *NodeItem) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *NodeItem) GetSeq() int32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *NodeItem) GetNexts() []string {
	if x != nil {
		return x.Nexts
	}
	return nil
}

func (x *NodeItem) GetParents() []string {
	if x != nil {
		return x.Parents
	}
	return nil
}

func (x *NodeItem) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

func (x *NodeItem) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// CancelInst 终止流程
type CancelInstReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	InstID   string    `protobuf:"bytes,2,opt,name=instID,proto3" json:"instID,omitempty"` // [必填] 流程实例ID
}

func (x *CancelInstReq) Reset() {
	*x = CancelInstReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelInstReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelInstReq) ProtoMessage() {}

func (x *CancelInstReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelInstReq.ProtoReflect.Descriptor instead.
func (*CancelInstReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{16}
}

func (x *CancelInstReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *CancelInstReq) GetInstID() string {
	if x != nil {
		return x.InstID
	}
	return ""
}

type CancelInstRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp *BasicRsp `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
}

func (x *CancelInstRsp) Reset() {
	*x = CancelInstRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelInstRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelInstRsp) ProtoMessage() {}

func (x *CancelInstRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelInstRsp.ProtoReflect.Descriptor instead.
func (*CancelInstRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{17}
}

func (x *CancelInstRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

// PauseInst 暂停流程
type PauseInstReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	InstID   string    `protobuf:"bytes,2,opt,name=instID,proto3" json:"instID,omitempty"` // [必填] 流程实例ID
}

func (x *PauseInstReq) Reset() {
	*x = PauseInstReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseInstReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseInstReq) ProtoMessage() {}

func (x *PauseInstReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseInstReq.ProtoReflect.Descriptor instead.
func (*PauseInstReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{18}
}

func (x *PauseInstReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *PauseInstReq) GetInstID() string {
	if x != nil {
		return x.InstID
	}
	return ""
}

type PauseInstRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp *BasicRsp `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
}

func (x *PauseInstRsp) Reset() {
	*x = PauseInstRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseInstRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseInstRsp) ProtoMessage() {}

func (x *PauseInstRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseInstRsp.ProtoReflect.Descriptor instead.
func (*PauseInstRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{19}
}

func (x *PauseInstRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

// ResumeInst 恢复流程
type ResumeInstReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	InstID   string    `protobuf:"bytes,2,opt,name=instID,proto3" json:"instID,omitempty"` // [必填] 流程实例ID
}

func (x *ResumeInstReq) Reset() {
	*x = ResumeInstReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeInstReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeInstReq) ProtoMessage() {}

func (x *ResumeInstReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeInstReq.ProtoReflect.Descriptor instead.
func (*ResumeInstReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{20}
}

func (x *ResumeInstReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *ResumeInstReq) GetInstID() string {
	if x != nil {
		return x.InstID
	}
	return ""
}

type ResumeInstRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp *BasicRsp `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
}

func (x *ResumeInstRsp) Reset() {
	*x = ResumeInstRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeInstRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeInstRsp) ProtoMessage() {}

func (x *ResumeInstRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeInstRsp.ProtoReflect.Descriptor instead.
func (*ResumeInstRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{21}
}

func (x *ResumeInstRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

// UpdateInstContext 更新实例参数环境参数
type UpdateInstContextReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	InstID   string    `protobuf:"bytes,2,opt,name=instID,proto3" json:"instID,omitempty"`   // [必填] 实例ID
	Context  string    `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"` // [必填] 更新的变量，为一个json字符串
}

func (x *UpdateInstContextReq) Reset() {
	*x = UpdateInstContextReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstContextReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstContextReq) ProtoMessage() {}

func (x *UpdateInstContextReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstContextReq.ProtoReflect.Descriptor instead.
func (*UpdateInstContextReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateInstContextReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *UpdateInstContextReq) GetInstID() string {
	if x != nil {
		return x.InstID
	}
	return ""
}

func (x *UpdateInstContextReq) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type UpdateInstContextRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp *BasicRsp `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
}

func (x *UpdateInstContextRsp) Reset() {
	*x = UpdateInstContextRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstContextRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstContextRsp) ProtoMessage() {}

func (x *UpdateInstContextRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstContextRsp.ProtoReflect.Descriptor instead.
func (*UpdateInstContextRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateInstContextRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

// GetInstList 获取流程实例列表
// 默认按时间降序排列
type GetInstListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq  *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	DefID     string    `protobuf:"bytes,2,opt,name=defID,proto3" json:"defID,omitempty"`        // 流程定义ID
	Status    string    `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`      // 工作流状态
	AscOrder  bool      `protobuf:"varint,4,opt,name=ascOrder,proto3" json:"ascOrder,omitempty"` // 是否升序排列
	PageIndex int32     `protobuf:"varint,5,opt,name=pageIndex,proto3" json:"pageIndex,omitempty"`
	PageSize  int32     `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *GetInstListReq) Reset() {
	*x = GetInstListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstListReq) ProtoMessage() {}

func (x *GetInstListReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstListReq.ProtoReflect.Descriptor instead.
func (*GetInstListReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{24}
}

func (x *GetInstListReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *GetInstListReq) GetDefID() string {
	if x != nil {
		return x.DefID
	}
	return ""
}

func (x *GetInstListReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetInstListReq) GetAscOrder() bool {
	if x != nil {
		return x.AscOrder
	}
	return false
}

func (x *GetInstListReq) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetInstListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// CompleteInstReq 结束流程
type CompleteInstReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq     *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	InstID       string    `protobuf:"bytes,2,opt,name=instID,proto3" json:"instID,omitempty"`             // [必填] 实例ID
	Operator     string    `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`         // [必填] 操作者
	Status       string    `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`             // [必填] success/failed
	Output       string    `protobuf:"bytes,6,opt,name=output,proto3" json:"output,omitempty"`             // [可选] 输出参数，status为成功时需要
	FailedReason string    `protobuf:"bytes,7,opt,name=failedReason,proto3" json:"failedReason,omitempty"` // [可选] 失败信息，status为失败时需要
}

func (x *CompleteInstReq) Reset() {
	*x = CompleteInstReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteInstReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteInstReq) ProtoMessage() {}

func (x *CompleteInstReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteInstReq.ProtoReflect.Descriptor instead.
func (*CompleteInstReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{25}
}

func (x *CompleteInstReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *CompleteInstReq) GetInstID() string {
	if x != nil {
		return x.InstID
	}
	return ""
}

func (x *CompleteInstReq) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *CompleteInstReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CompleteInstReq) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *CompleteInstReq) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

type CompleteInstRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp *BasicRsp `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
}

func (x *CompleteInstRsp) Reset() {
	*x = CompleteInstRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteInstRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteInstRsp) ProtoMessage() {}

func (x *CompleteInstRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteInstRsp.ProtoReflect.Descriptor instead.
func (*CompleteInstRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{26}
}

func (x *CompleteInstRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

type GetInstListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp    *BasicRsp     `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
	InstDetails []*InstDetail `protobuf:"bytes,2,rep,name=instDetails,proto3" json:"instDetails,omitempty"` // 工作流列表
	PageIndex   int32         `protobuf:"varint,3,opt,name=pageIndex,proto3" json:"pageIndex,omitempty"`
	PageSize    int32         `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Total       int32         `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetInstListRsp) Reset() {
	*x = GetInstListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstListRsp) ProtoMessage() {}

func (x *GetInstListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstListRsp.ProtoReflect.Descriptor instead.
func (*GetInstListRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{27}
}

func (x *GetInstListRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

func (x *GetInstListRsp) GetInstDetails() []*InstDetail {
	if x != nil {
		return x.InstDetails
	}
	return nil
}

func (x *GetInstListRsp) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetInstListRsp) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetInstListRsp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type InstDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                // 实例名称
	InstID      string `protobuf:"bytes,2,opt,name=instID,proto3" json:"instID,omitempty"`            // 流程ID
	Status      string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`            // 工作流状态
	Creator     string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`          // 工作流操作者
	CreateAt    int64  `protobuf:"varint,5,opt,name=createAt,proto3" json:"createAt,omitempty"`       // 创建时间，unixSec时间戳（秒）
	StartAt     int64  `protobuf:"varint,6,opt,name=startAt,proto3" json:"startAt,omitempty"`         // 开始运行时间, unixSec时间戳（毫秒）
	CompletedAt int64  `protobuf:"varint,7,opt,name=completedAt,proto3" json:"completedAt,omitempty"` // 结束运行时间, unixSec时间戳（毫秒）
}

func (x *InstDetail) Reset() {
	*x = InstDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstDetail) ProtoMessage() {}

func (x *InstDetail) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstDetail.ProtoReflect.Descriptor instead.
func (*InstDetail) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{28}
}

func (x *InstDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstDetail) GetInstID() string {
	if x != nil {
		return x.InstID
	}
	return ""
}

func (x *InstDetail) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *InstDetail) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *InstDetail) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *InstDetail) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *InstDetail) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

// RestartInst 从某个节点开始重跑实例 (节点之后的流程也会跑)
type RestartInstReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq    *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	InstID      string    `protobuf:"bytes,2,opt,name=instID,proto3" json:"instID,omitempty"`           // [必填] 流程实例ID
	NodeRefName string    `protobuf:"bytes,3,opt,name=nodeRefName,proto3" json:"nodeRefName,omitempty"` // [必填] 节点引用名称
	Input       string    `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`             // [必填] 参数
}

func (x *RestartInstReq) Reset() {
	*x = RestartInstReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartInstReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartInstReq) ProtoMessage() {}

func (x *RestartInstReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartInstReq.ProtoReflect.Descriptor instead.
func (*RestartInstReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{29}
}

func (x *RestartInstReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *RestartInstReq) GetInstID() string {
	if x != nil {
		return x.InstID
	}
	return ""
}

func (x *RestartInstReq) GetNodeRefName() string {
	if x != nil {
		return x.NodeRefName
	}
	return ""
}

func (x *RestartInstReq) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

type RestartInstRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp *BasicRsp `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
}

func (x *RestartInstRsp) Reset() {
	*x = RestartInstRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartInstRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartInstRsp) ProtoMessage() {}

func (x *RestartInstRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartInstRsp.ProtoReflect.Descriptor instead.
func (*RestartInstRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{30}
}

func (x *RestartInstRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

// GetNodeInstDetail 获取节点实例信息
type GetNodeInstDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq   *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	NodeInstID string    `protobuf:"bytes,2,opt,name=nodeInstID,proto3" json:"nodeInstID,omitempty"` // [必填] 节点实例ID
}

func (x *GetNodeInstDetailReq) Reset() {
	*x = GetNodeInstDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeInstDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeInstDetailReq) ProtoMessage() {}

func (x *GetNodeInstDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeInstDetailReq.ProtoReflect.Descriptor instead.
func (*GetNodeInstDetailReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{31}
}

func (x *GetNodeInstDetailReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *GetNodeInstDetailReq) GetNodeInstID() string {
	if x != nil {
		return x.NodeInstID
	}
	return ""
}

type GetNodeInstDetailRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp *BasicRsp `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
	NodeItem *NodeItem `protobuf:"bytes,2,opt,name=nodeItem,proto3" json:"nodeItem,omitempty"`
}

func (x *GetNodeInstDetailRsp) Reset() {
	*x = GetNodeInstDetailRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeInstDetailRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeInstDetailRsp) ProtoMessage() {}

func (x *GetNodeInstDetailRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeInstDetailRsp.ProtoReflect.Descriptor instead.
func (*GetNodeInstDetailRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{32}
}

func (x *GetNodeInstDetailRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

func (x *GetNodeInstDetailRsp) GetNodeItem() *NodeItem {
	if x != nil {
		return x.NodeItem
	}
	return nil
}

// SkipNode 跳过某节点
type SkipNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq    *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	InstID      string    `protobuf:"bytes,2,opt,name=instID,proto3" json:"instID,omitempty"`           // [必填] 实例ID
	NodeRefName string    `protobuf:"bytes,3,opt,name=nodeRefName,proto3" json:"nodeRefName,omitempty"` // [必填] 节点引用名称
}

func (x *SkipNodeReq) Reset() {
	*x = SkipNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkipNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkipNodeReq) ProtoMessage() {}

func (x *SkipNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkipNodeReq.ProtoReflect.Descriptor instead.
func (*SkipNodeReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{33}
}

func (x *SkipNodeReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *SkipNodeReq) GetInstID() string {
	if x != nil {
		return x.InstID
	}
	return ""
}

func (x *SkipNodeReq) GetNodeRefName() string {
	if x != nil {
		return x.NodeRefName
	}
	return ""
}

type SkipNodeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp *BasicRsp `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
}

func (x *SkipNodeRsp) Reset() {
	*x = SkipNodeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkipNodeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkipNodeRsp) ProtoMessage() {}

func (x *SkipNodeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkipNodeRsp.ProtoReflect.Descriptor instead.
func (*SkipNodeRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{34}
}

func (x *SkipNodeRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

// CancelSkipNode 恢复某节点
type CancelSkipNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq    *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	InstID      string    `protobuf:"bytes,2,opt,name=instID,proto3" json:"instID,omitempty"`           // [必填] 实例ID
	NodeRefName string    `protobuf:"bytes,3,opt,name=nodeRefName,proto3" json:"nodeRefName,omitempty"` // [必填] 节点引用名称
}

func (x *CancelSkipNodeReq) Reset() {
	*x = CancelSkipNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelSkipNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSkipNodeReq) ProtoMessage() {}

func (x *CancelSkipNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSkipNodeReq.ProtoReflect.Descriptor instead.
func (*CancelSkipNodeReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{35}
}

func (x *CancelSkipNodeReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *CancelSkipNodeReq) GetInstID() string {
	if x != nil {
		return x.InstID
	}
	return ""
}

func (x *CancelSkipNodeReq) GetNodeRefName() string {
	if x != nil {
		return x.NodeRefName
	}
	return ""
}

type CancelSkipNodeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp *BasicRsp `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
}

func (x *CancelSkipNodeRsp) Reset() {
	*x = CancelSkipNodeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelSkipNodeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSkipNodeRsp) ProtoMessage() {}

func (x *CancelSkipNodeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSkipNodeRsp.ProtoReflect.Descriptor instead.
func (*CancelSkipNodeRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{36}
}

func (x *CancelSkipNodeRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

// CompleteNode 结束节点
type CompleteNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq     *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	InstID       string    `protobuf:"bytes,2,opt,name=instID,proto3" json:"instID,omitempty"`             // [必填] 实例ID
	NodeRefName  string    `protobuf:"bytes,3,opt,name=nodeRefName,proto3" json:"nodeRefName,omitempty"`   // [必填] 节点引用名称 不存在两个节点实例同时存在
	Operator     string    `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`         // [必填] 操作者
	Status       string    `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`             // [必填] success/failed
	NodeOutput   string    `protobuf:"bytes,6,opt,name=nodeOutput,proto3" json:"nodeOutput,omitempty"`     // [可选] 输出参数，status为成功时需要
	NodeInstID   string    `protobuf:"bytes,7,opt,name=nodeInstID,proto3" json:"nodeInstID,omitempty"`     // [可选] 节点实例ID，如果填写了节点实例ID，则操作的是具体的节点实例ID
	FailedReason string    `protobuf:"bytes,8,opt,name=failedReason,proto3" json:"failedReason,omitempty"` // [可选] 失败信息，status为失败时需要
}

func (x *CompleteNodeReq) Reset() {
	*x = CompleteNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteNodeReq) ProtoMessage() {}

func (x *CompleteNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteNodeReq.ProtoReflect.Descriptor instead.
func (*CompleteNodeReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{37}
}

func (x *CompleteNodeReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *CompleteNodeReq) GetInstID() string {
	if x != nil {
		return x.InstID
	}
	return ""
}

func (x *CompleteNodeReq) GetNodeRefName() string {
	if x != nil {
		return x.NodeRefName
	}
	return ""
}

func (x *CompleteNodeReq) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *CompleteNodeReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CompleteNodeReq) GetNodeOutput() string {
	if x != nil {
		return x.NodeOutput
	}
	return ""
}

func (x *CompleteNodeReq) GetNodeInstID() string {
	if x != nil {
		return x.NodeInstID
	}
	return ""
}

func (x *CompleteNodeReq) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

type CompleteNodeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp *BasicRsp `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
}

func (x *CompleteNodeRsp) Reset() {
	*x = CompleteNodeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteNodeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteNodeRsp) ProtoMessage() {}

func (x *CompleteNodeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteNodeRsp.ProtoReflect.Descriptor instead.
func (*CompleteNodeRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{38}
}

func (x *CompleteNodeRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

// CancelNode 终止指定已运行节点
type CancelNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq    *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	InstID      string    `protobuf:"bytes,2,opt,name=instID,proto3" json:"instID,omitempty"`           // [必填] 实例ID
	NodeRefName string    `protobuf:"bytes,3,opt,name=nodeRefName,proto3" json:"nodeRefName,omitempty"` // [必填] 节点引用名称
	Operator    string    `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`       // [必填] 操作者
	NodeInstID  string    `protobuf:"bytes,5,opt,name=nodeInstID,proto3" json:"nodeInstID,omitempty"`   // [可选] 节点实例ID，如果填写了节点实例ID，则操作的是具体的节点实例ID
}

func (x *CancelNodeReq) Reset() {
	*x = CancelNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelNodeReq) ProtoMessage() {}

func (x *CancelNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelNodeReq.ProtoReflect.Descriptor instead.
func (*CancelNodeReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{39}
}

func (x *CancelNodeReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *CancelNodeReq) GetInstID() string {
	if x != nil {
		return x.InstID
	}
	return ""
}

func (x *CancelNodeReq) GetNodeRefName() string {
	if x != nil {
		return x.NodeRefName
	}
	return ""
}

func (x *CancelNodeReq) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *CancelNodeReq) GetNodeInstID() string {
	if x != nil {
		return x.NodeInstID
	}
	return ""
}

type CancelNodeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp *BasicRsp `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
}

func (x *CancelNodeRsp) Reset() {
	*x = CancelNodeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelNodeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelNodeRsp) ProtoMessage() {}

func (x *CancelNodeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelNodeRsp.ProtoReflect.Descriptor instead.
func (*CancelNodeRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{40}
}

func (x *CancelNodeRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

// RerunNode 重跑指定已运行节点 (只跑单个节点)
type RerunNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq    *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	InstID      string    `protobuf:"bytes,2,opt,name=instID,proto3" json:"instID,omitempty"`           // [必填] 实例ID
	NodeRefName string    `protobuf:"bytes,3,opt,name=nodeRefName,proto3" json:"nodeRefName,omitempty"` // [必填] 节点引用名称
}

func (x *RerunNodeReq) Reset() {
	*x = RerunNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerunNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerunNodeReq) ProtoMessage() {}

func (x *RerunNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerunNodeReq.ProtoReflect.Descriptor instead.
func (*RerunNodeReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{41}
}

func (x *RerunNodeReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *RerunNodeReq) GetInstID() string {
	if x != nil {
		return x.InstID
	}
	return ""
}

func (x *RerunNodeReq) GetNodeRefName() string {
	if x != nil {
		return x.NodeRefName
	}
	return ""
}

type RerunNodeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp *BasicRsp `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
}

func (x *RerunNodeRsp) Reset() {
	*x = RerunNodeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerunNodeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerunNodeRsp) ProtoMessage() {}

func (x *RerunNodeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerunNodeRsp.ProtoReflect.Descriptor instead.
func (*RerunNodeRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{42}
}

func (x *RerunNodeRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

// ResumeNode 继续指定等待中的节点
type ResumeNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicReq    *BasicReq `protobuf:"bytes,1,opt,name=basicReq,proto3" json:"basicReq,omitempty"`
	InstID      string    `protobuf:"bytes,2,opt,name=instID,proto3" json:"instID,omitempty"`           // [必填] 实例ID
	NodeRefName string    `protobuf:"bytes,3,opt,name=nodeRefName,proto3" json:"nodeRefName,omitempty"` // [必填] 节点引用名称
	NodeInstID  string    `protobuf:"bytes,4,opt,name=nodeInstID,proto3" json:"nodeInstID,omitempty"`   // [可选] 节点实例ID，如果填写了节点实例ID，则操作的是具体的节点实例ID
}

func (x *ResumeNodeReq) Reset() {
	*x = ResumeNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeNodeReq) ProtoMessage() {}

func (x *ResumeNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeNodeReq.ProtoReflect.Descriptor instead.
func (*ResumeNodeReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{43}
}

func (x *ResumeNodeReq) GetBasicReq() *BasicReq {
	if x != nil {
		return x.BasicReq
	}
	return nil
}

func (x *ResumeNodeReq) GetInstID() string {
	if x != nil {
		return x.InstID
	}
	return ""
}

func (x *ResumeNodeReq) GetNodeRefName() string {
	if x != nil {
		return x.NodeRefName
	}
	return ""
}

func (x *ResumeNodeReq) GetNodeInstID() string {
	if x != nil {
		return x.NodeInstID
	}
	return ""
}

type ResumeNodeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRsp *BasicRsp `protobuf:"bytes,1,opt,name=basicRsp,proto3" json:"basicRsp,omitempty"`
}

func (x *ResumeNodeRsp) Reset() {
	*x = ResumeNodeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeNodeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeNodeRsp) ProtoMessage() {}

func (x *ResumeNodeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeNodeRsp.ProtoReflect.Descriptor instead.
func (*ResumeNodeRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{44}
}

func (x *ResumeNodeRsp) GetBasicRsp() *BasicRsp {
	if x != nil {
		return x.BasicRsp
	}
	return nil
}

type BasicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace   string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`     // 命名空间
	AccessToken string `protobuf:"bytes,2,opt,name=accessToken,proto3" json:"accessToken,omitempty"` // token
	Operator    string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`       // [必填] 操作人
	Reason      string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`           // [可选] 调用原因
}

func (x *BasicReq) Reset() {
	*x = BasicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicReq) ProtoMessage() {}

func (x *BasicReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicReq.ProtoReflect.Descriptor instead.
func (*BasicReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{45}
}

func (x *BasicReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *BasicReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *BasicReq) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *BasicReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type BasicRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误码, 具体定义参考 https://cloud.google.com/natural-language/nl-whitelist/reference/rpc/google.rpc?hl=zh-cn
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BasicRsp) Reset() {
	*x = BasicRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicRsp) ProtoMessage() {}

func (x *BasicRsp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicRsp.ProtoReflect.Descriptor instead.
func (*BasicRsp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{46}
}

func (x *BasicRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BasicRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_workflow_proto protoreflect.FileDescriptor

var file_workflow_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x52, 0x08, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x52, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x52, 0x73,
	0x70, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x52, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x66, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x64, 0x65, 0x66, 0x49, 0x44, 0x22, 0x98, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x66, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x66, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x22, 0x3c, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x52, 0x73, 0x70,
	0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x52, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x22, 0x55,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x66, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x64, 0x65, 0x66, 0x49, 0x44, 0x22, 0x76, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x52, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x44, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x66,
	0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x22, 0xcf, 0x01,
	0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x52, 0x0a, 0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x12,
	0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x66, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65,
	0x66, 0x49, 0x44, 0x22, 0x3c, 0x0a, 0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73,
	0x70, 0x22, 0x53, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x52,
	0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x66, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x65, 0x66, 0x49, 0x44, 0x22, 0x3d, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x65, 0x66, 0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x52, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x52, 0x73, 0x70, 0x22, 0xa2, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x66, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x66, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x54, 0x0a, 0x0c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x52, 0x08,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44,
	0x22, 0x58, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x22, 0xee, 0x02, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x12,
	0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x52, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x66, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x65, 0x66, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xda, 0x04, 0x0a, 0x08,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x6c, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x6c, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0f, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x2e, 0x0a, 0x10, 0x70, 0x6f, 0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10,
	0x70, 0x6f, 0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69,
	0x7a, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x7a, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x65,
	0x78, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x65, 0x78, 0x74, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x55, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x52, 0x08, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x22,
	0x3d, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x73, 0x70,
	0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x52, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x22, 0x54,
	0x0a, 0x0c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2c,
	0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e,
	0x73, 0x74, 0x49, 0x44, 0x22, 0x3c, 0x0a, 0x0c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52,
	0x73, 0x70, 0x22, 0x55, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x22, 0x3d, 0x0a, 0x0d, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x52, 0x08,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x22, 0x76, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x44, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x52, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x52, 0x08, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x66, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x66, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x63, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x73, 0x63, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x3f, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x52, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x22, 0xc4, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x52, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x52, 0x08, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc2, 0x01,
	0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x22, 0x3e, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x52, 0x73, 0x70, 0x22, 0x64, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x52,
	0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x22, 0x72, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73,
	0x70, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x52, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x12,
	0x2c, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x75, 0x0a,
	0x0b, 0x53, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73,
	0x70, 0x22, 0x7b, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x6b, 0x69, 0x70, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x41,
	0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73,
	0x70, 0x22, 0x91, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x3f, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x52, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x22, 0xb3, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x52, 0x08, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x22, 0x3d, 0x0a, 0x0d,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a,
	0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73,
	0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x22, 0x76, 0x0a, 0x0c, 0x52,
	0x65, 0x72, 0x75, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x52,
	0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x0c, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73,
	0x70, 0x22, 0x97, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x22, 0x3d, 0x0a, 0x0d, 0x52,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70,
	0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x22, 0x7e, 0x0a, 0x08, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x08, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0xb5, 0x0a, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x37, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x12, 0x14,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x66, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x52, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x12, 0x14, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66,
	0x52, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x17, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x66, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x66, 0x12, 0x14, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x52, 0x73, 0x70, 0x12, 0x3a,
	0x0a, 0x0a, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x12, 0x15, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x52, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x52, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x73,
	0x70, 0x12, 0x37, 0x0a, 0x09, 0x50, 0x61, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x14,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0a, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x18, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0b, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x1c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x08, 0x53,
	0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x53, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x73,
	0x70, 0x12, 0x46, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x6b, 0x69, 0x70, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x53, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x19,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x6b,
	0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x0c, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x17, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0a, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x52, 0x65, 0x72, 0x75, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65,
	0x72, 0x75, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70,
	0x12, 0x3a, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x15,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x42, 0x4a, 0x0a, 0x14,
	0x69, 0x6f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x42, 0x0b, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x66, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_workflow_proto_rawDescOnce sync.Once
	file_workflow_proto_rawDescData = file_workflow_proto_rawDesc
)

func file_workflow_proto_rawDescGZIP() []byte {
	file_workflow_proto_rawDescOnce.Do(func() {
		file_workflow_proto_rawDescData = protoimpl.X.CompressGZIP(file_workflow_proto_rawDescData)
	})
	return file_workflow_proto_rawDescData
}

var file_workflow_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_workflow_proto_goTypes = []interface{}{
	(*CreateDefReq)(nil),         // 0: engine.CreateDefReq
	(*CreateDefRsp)(nil),         // 1: engine.CreateDefRsp
	(*UpdateDefReq)(nil),         // 2: engine.UpdateDefReq
	(*UpdateDefRsp)(nil),         // 3: engine.UpdateDefRsp
	(*GetDefDetailReq)(nil),      // 4: engine.GetDefDetailReq
	(*GetDefDetailRsp)(nil),      // 5: engine.GetDefDetailRsp
	(*WorkflowDef)(nil),          // 6: engine.WorkflowDef
	(*EnableDefReq)(nil),         // 7: engine.EnableDefReq
	(*EnableDefRsp)(nil),         // 8: engine.EnableDefRsp
	(*DisableDefReq)(nil),        // 9: engine.DisableDefReq
	(*DisableDefRsp)(nil),        // 10: engine.DisableDefRsp
	(*StartInstReq)(nil),         // 11: engine.StartInstReq
	(*StartInstRsp)(nil),         // 12: engine.StartInstRsp
	(*GetInstDetailReq)(nil),     // 13: engine.GetInstDetailReq
	(*GetInstDetailRsp)(nil),     // 14: engine.GetInstDetailRsp
	(*NodeItem)(nil),             // 15: engine.NodeItem
	(*CancelInstReq)(nil),        // 16: engine.CancelInstReq
	(*CancelInstRsp)(nil),        // 17: engine.CancelInstRsp
	(*PauseInstReq)(nil),         // 18: engine.PauseInstReq
	(*PauseInstRsp)(nil),         // 19: engine.PauseInstRsp
	(*ResumeInstReq)(nil),        // 20: engine.ResumeInstReq
	(*ResumeInstRsp)(nil),        // 21: engine.ResumeInstRsp
	(*UpdateInstContextReq)(nil), // 22: engine.UpdateInstContextReq
	(*UpdateInstContextRsp)(nil), // 23: engine.UpdateInstContextRsp
	(*GetInstListReq)(nil),       // 24: engine.GetInstListReq
	(*CompleteInstReq)(nil),      // 25: engine.CompleteInstReq
	(*CompleteInstRsp)(nil),      // 26: engine.CompleteInstRsp
	(*GetInstListRsp)(nil),       // 27: engine.GetInstListRsp
	(*InstDetail)(nil),           // 28: engine.InstDetail
	(*RestartInstReq)(nil),       // 29: engine.RestartInstReq
	(*RestartInstRsp)(nil),       // 30: engine.RestartInstRsp
	(*GetNodeInstDetailReq)(nil), // 31: engine.GetNodeInstDetailReq
	(*GetNodeInstDetailRsp)(nil), // 32: engine.GetNodeInstDetailRsp
	(*SkipNodeReq)(nil),          // 33: engine.SkipNodeReq
	(*SkipNodeRsp)(nil),          // 34: engine.SkipNodeRsp
	(*CancelSkipNodeReq)(nil),    // 35: engine.CancelSkipNodeReq
	(*CancelSkipNodeRsp)(nil),    // 36: engine.CancelSkipNodeRsp
	(*CompleteNodeReq)(nil),      // 37: engine.CompleteNodeReq
	(*CompleteNodeRsp)(nil),      // 38: engine.CompleteNodeRsp
	(*CancelNodeReq)(nil),        // 39: engine.CancelNodeReq
	(*CancelNodeRsp)(nil),        // 40: engine.CancelNodeRsp
	(*RerunNodeReq)(nil),         // 41: engine.RerunNodeReq
	(*RerunNodeRsp)(nil),         // 42: engine.RerunNodeRsp
	(*ResumeNodeReq)(nil),        // 43: engine.ResumeNodeReq
	(*ResumeNodeRsp)(nil),        // 44: engine.ResumeNodeRsp
	(*BasicReq)(nil),             // 45: engine.BasicReq
	(*BasicRsp)(nil),             // 46: engine.BasicRsp
}
var file_workflow_proto_depIdxs = []int32{
	45, // 0: engine.CreateDefReq.basicReq:type_name -> engine.BasicReq
	46, // 1: engine.CreateDefRsp.basicRsp:type_name -> engine.BasicRsp
	45, // 2: engine.UpdateDefReq.basicReq:type_name -> engine.BasicReq
	46, // 3: engine.UpdateDefRsp.basicRsp:type_name -> engine.BasicRsp
	45, // 4: engine.GetDefDetailReq.basicReq:type_name -> engine.BasicReq
	46, // 5: engine.GetDefDetailRsp.basicRsp:type_name -> engine.BasicRsp
	6,  // 6: engine.GetDefDetailRsp.workflowDef:type_name -> engine.WorkflowDef
	45, // 7: engine.EnableDefReq.basicReq:type_name -> engine.BasicReq
	46, // 8: engine.EnableDefRsp.basicRsp:type_name -> engine.BasicRsp
	45, // 9: engine.DisableDefReq.basicReq:type_name -> engine.BasicReq
	46, // 10: engine.DisableDefRsp.basicRsp:type_name -> engine.BasicRsp
	45, // 11: engine.StartInstReq.basicReq:type_name -> engine.BasicReq
	46, // 12: engine.StartInstRsp.basicRsp:type_name -> engine.BasicRsp
	45, // 13: engine.GetInstDetailReq.basicReq:type_name -> engine.BasicReq
	46, // 14: engine.GetInstDetailRsp.basicRsp:type_name -> engine.BasicRsp
	15, // 15: engine.GetInstDetailRsp.nodeItems:type_name -> engine.NodeItem
	45, // 16: engine.CancelInstReq.basicReq:type_name -> engine.BasicReq
	46, // 17: engine.CancelInstRsp.basicRsp:type_name -> engine.BasicRsp
	45, // 18: engine.PauseInstReq.basicReq:type_name -> engine.BasicReq
	46, // 19: engine.PauseInstRsp.basicRsp:type_name -> engine.BasicRsp
	45, // 20: engine.ResumeInstReq.basicReq:type_name -> engine.BasicReq
	46, // 21: engine.ResumeInstRsp.basicRsp:type_name -> engine.BasicRsp
	45, // 22: engine.UpdateInstContextReq.basicReq:type_name -> engine.BasicReq
	46, // 23: engine.UpdateInstContextRsp.basicRsp:type_name -> engine.BasicRsp
	45, // 24: engine.GetInstListReq.basicReq:type_name -> engine.BasicReq
	45, // 25: engine.CompleteInstReq.basicReq:type_name -> engine.BasicReq
	46, // 26: engine.CompleteInstRsp.basicRsp:type_name -> engine.BasicRsp
	46, // 27: engine.GetInstListRsp.basicRsp:type_name -> engine.BasicRsp
	28, // 28: engine.GetInstListRsp.instDetails:type_name -> engine.InstDetail
	45, // 29: engine.RestartInstReq.basicReq:type_name -> engine.BasicReq
	46, // 30: engine.RestartInstRsp.basicRsp:type_name -> engine.BasicRsp
	45, // 31: engine.GetNodeInstDetailReq.basicReq:type_name -> engine.BasicReq
	46, // 32: engine.GetNodeInstDetailRsp.basicRsp:type_name -> engine.BasicRsp
	15, // 33: engine.GetNodeInstDetailRsp.nodeItem:type_name -> engine.NodeItem
	45, // 34: engine.SkipNodeReq.basicReq:type_name -> engine.BasicReq
	46, // 35: engine.SkipNodeRsp.basicRsp:type_name -> engine.BasicRsp
	45, // 36: engine.CancelSkipNodeReq.basicReq:type_name -> engine.BasicReq
	46, // 37: engine.CancelSkipNodeRsp.basicRsp:type_name -> engine.BasicRsp
	45, // 38: engine.CompleteNodeReq.basicReq:type_name -> engine.BasicReq
	46, // 39: engine.CompleteNodeRsp.basicRsp:type_name -> engine.BasicRsp
	45, // 40: engine.CancelNodeReq.basicReq:type_name -> engine.BasicReq
	46, // 41: engine.CancelNodeRsp.basicRsp:type_name -> engine.BasicRsp
	45, // 42: engine.RerunNodeReq.basicReq:type_name -> engine.BasicReq
	46, // 43: engine.RerunNodeRsp.basicRsp:type_name -> engine.BasicRsp
	45, // 44: engine.ResumeNodeReq.basicReq:type_name -> engine.BasicReq
	46, // 45: engine.ResumeNodeRsp.basicRsp:type_name -> engine.BasicRsp
	0,  // 46: engine.Workflow.CreateDef:input_type -> engine.CreateDefReq
	2,  // 47: engine.Workflow.UpdateDef:input_type -> engine.UpdateDefReq
	4,  // 48: engine.Workflow.GetDefDetail:input_type -> engine.GetDefDetailReq
	7,  // 49: engine.Workflow.EnableDef:input_type -> engine.EnableDefReq
	9,  // 50: engine.Workflow.DisableDef:input_type -> engine.DisableDefReq
	11, // 51: engine.Workflow.StartInst:input_type -> engine.StartInstReq
	25, // 52: engine.Workflow.CompleteInst:input_type -> engine.CompleteInstReq
	16, // 53: engine.Workflow.CancelInst:input_type -> engine.CancelInstReq
	18, // 54: engine.Workflow.PauseInst:input_type -> engine.PauseInstReq
	20, // 55: engine.Workflow.ResumeInst:input_type -> engine.ResumeInstReq
	22, // 56: engine.Workflow.UpdateInstContext:input_type -> engine.UpdateInstContextReq
	13, // 57: engine.Workflow.GetInstDetail:input_type -> engine.GetInstDetailReq
	24, // 58: engine.Workflow.GetInstList:input_type -> engine.GetInstListReq
	29, // 59: engine.Workflow.RestartInst:input_type -> engine.RestartInstReq
	31, // 60: engine.Workflow.GetNodeInstDetail:input_type -> engine.GetNodeInstDetailReq
	33, // 61: engine.Workflow.SkipNode:input_type -> engine.SkipNodeReq
	35, // 62: engine.Workflow.CancelSkipNode:input_type -> engine.CancelSkipNodeReq
	37, // 63: engine.Workflow.CompleteNode:input_type -> engine.CompleteNodeReq
	39, // 64: engine.Workflow.CancelNode:input_type -> engine.CancelNodeReq
	41, // 65: engine.Workflow.RerunNode:input_type -> engine.RerunNodeReq
	43, // 66: engine.Workflow.ResumeNode:input_type -> engine.ResumeNodeReq
	1,  // 67: engine.Workflow.CreateDef:output_type -> engine.CreateDefRsp
	3,  // 68: engine.Workflow.UpdateDef:output_type -> engine.UpdateDefRsp
	5,  // 69: engine.Workflow.GetDefDetail:output_type -> engine.GetDefDetailRsp
	8,  // 70: engine.Workflow.EnableDef:output_type -> engine.EnableDefRsp
	10, // 71: engine.Workflow.DisableDef:output_type -> engine.DisableDefRsp
	12, // 72: engine.Workflow.StartInst:output_type -> engine.StartInstRsp
	26, // 73: engine.Workflow.CompleteInst:output_type -> engine.CompleteInstRsp
	17, // 74: engine.Workflow.CancelInst:output_type -> engine.CancelInstRsp
	19, // 75: engine.Workflow.PauseInst:output_type -> engine.PauseInstRsp
	21, // 76: engine.Workflow.ResumeInst:output_type -> engine.ResumeInstRsp
	23, // 77: engine.Workflow.UpdateInstContext:output_type -> engine.UpdateInstContextRsp
	14, // 78: engine.Workflow.GetInstDetail:output_type -> engine.GetInstDetailRsp
	27, // 79: engine.Workflow.GetInstList:output_type -> engine.GetInstListRsp
	30, // 80: engine.Workflow.RestartInst:output_type -> engine.RestartInstRsp
	32, // 81: engine.Workflow.GetNodeInstDetail:output_type -> engine.GetNodeInstDetailRsp
	34, // 82: engine.Workflow.SkipNode:output_type -> engine.SkipNodeRsp
	36, // 83: engine.Workflow.CancelSkipNode:output_type -> engine.CancelSkipNodeRsp
	38, // 84: engine.Workflow.CompleteNode:output_type -> engine.CompleteNodeRsp
	40, // 85: engine.Workflow.CancelNode:output_type -> engine.CancelNodeRsp
	42, // 86: engine.Workflow.RerunNode:output_type -> engine.RerunNodeRsp
	44, // 87: engine.Workflow.ResumeNode:output_type -> engine.ResumeNodeRsp
	67, // [67:88] is the sub-list for method output_type
	46, // [46:67] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_workflow_proto_init() }
func file_workflow_proto_init() {
	if File_workflow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_workflow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDefReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDefRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDefReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDefRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefDetailRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableDefReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableDefRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableDefReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableDefRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartInstReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartInstRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstDetailRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelInstReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelInstRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseInstReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseInstRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeInstReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeInstRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstContextReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstContextRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteInstReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteInstRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartInstReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartInstRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeInstDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeInstDetailRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkipNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkipNodeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelSkipNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelSkipNodeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteNodeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelNodeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RerunNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RerunNodeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeNodeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_workflow_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_workflow_proto_goTypes,
		DependencyIndexes: file_workflow_proto_depIdxs,
		MessageInfos:      file_workflow_proto_msgTypes,
	}.Build()
	File_workflow_proto = out.File
	file_workflow_proto_rawDesc = nil
	file_workflow_proto_goTypes = nil
	file_workflow_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package timer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EndpointClient is the client API for Endpoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EndpointClient interface {
	// CreateTimer 创建定时器
	CreateTimer(ctx context.Context, in *CreateTimerReq, opts ...grpc.CallOption) (*CreateTimerRsp, error)
	// EnableTimer 激活定时器
	EnableTimer(ctx context.Context, in *EnableTimerReq, opts ...grpc.CallOption) (*EnableTimerRsp, error)
	// DisableTimer 去激活定时器
	DisableTimer(ctx context.Context, in *DisableTimerReq, opts ...grpc.CallOption) (*DisableTimerRsp, error)
	// GetTimerDef 获取定时器定义
	GetTimerDef(ctx context.Context, in *GetTimerDefReq, opts ...grpc.CallOption) (*GetTimerDefRsp, error)
	// DeleteTimerDef 删除定时器定义
	DeleteTimerDef(ctx context.Context, in *DeleteTimerDefReq, opts ...grpc.CallOption) (*DeleteTimerDefRsp, error)
	// GetTimerDefList 获取定时器列表
	GetTimerDefList(ctx context.Context, in *GetTimerDefListReq, opts ...grpc.CallOption) (*GetTimerDefListRsp, error)
	// GetRunHistoryList 获取定时器执行列表
	GetRunHistoryList(ctx context.Context, in *GetRunHistoryListReq, opts ...grpc.CallOption) (*GetRunHistoryListRsp, error)
	// CreateApp 创建APP
	CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppRsp, error)
	// DeleteApp 删除App
	DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*DeleteAppRsp, error)
	// GetAppList 获取App列表
	GetAppList(ctx context.Context, in *GetAppListReq, opts ...grpc.CallOption) (*GetAppListRsp, error)
}

type endpointClient struct {
	cc grpc.ClientConnInterface
}

func NewEndpointClient(cc grpc.ClientConnInterface) EndpointClient {
	return &endpointClient{cc}
}

func (c *endpointClient) CreateTimer(ctx context.Context, in *CreateTimerReq, opts ...grpc.CallOption) (*CreateTimerRsp, error) {
	out := new(CreateTimerRsp)
	err := c.cc.Invoke(ctx, "/timer.Endpoint/CreateTimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) EnableTimer(ctx context.Context, in *EnableTimerReq, opts ...grpc.CallOption) (*EnableTimerRsp, error) {
	out := new(EnableTimerRsp)
	err := c.cc.Invoke(ctx, "/timer.Endpoint/EnableTimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) DisableTimer(ctx context.Context, in *DisableTimerReq, opts ...grpc.CallOption) (*DisableTimerRsp, error) {
	out := new(DisableTimerRsp)
	err := c.cc.Invoke(ctx, "/timer.Endpoint/DisableTimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) GetTimerDef(ctx context.Context, in *GetTimerDefReq, opts ...grpc.CallOption) (*GetTimerDefRsp, error) {
	out := new(GetTimerDefRsp)
	err := c.cc.Invoke(ctx, "/timer.Endpoint/GetTimerDef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) DeleteTimerDef(ctx context.Context, in *DeleteTimerDefReq, opts ...grpc.CallOption) (*DeleteTimerDefRsp, error) {
	out := new(DeleteTimerDefRsp)
	err := c.cc.Invoke(ctx, "/timer.Endpoint/DeleteTimerDef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) GetTimerDefList(ctx context.Context, in *GetTimerDefListReq, opts ...grpc.CallOption) (*GetTimerDefListRsp, error) {
	out := new(GetTimerDefListRsp)
	err := c.cc.Invoke(ctx, "/timer.Endpoint/GetTimerDefList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) GetRunHistoryList(ctx context.Context, in *GetRunHistoryListReq, opts ...grpc.CallOption) (*GetRunHistoryListRsp, error) {
	out := new(GetRunHistoryListRsp)
	err := c.cc.Invoke(ctx, "/timer.Endpoint/GetRunHistoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppRsp, error) {
	out := new(CreateAppRsp)
	err := c.cc.Invoke(ctx, "/timer.Endpoint/CreateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*DeleteAppRsp, error) {
	out := new(DeleteAppRsp)
	err := c.cc.Invoke(ctx, "/timer.Endpoint/DeleteApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) GetAppList(ctx context.Context, in *GetAppListReq, opts ...grpc.CallOption) (*GetAppListRsp, error) {
	out := new(GetAppListRsp)
	err := c.cc.Invoke(ctx, "/timer.Endpoint/GetAppList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndpointServer is the server API for Endpoint service.
// All implementations must embed UnimplementedEndpointServer
// for forward compatibility
type EndpointServer interface {
	// CreateTimer 创建定时器
	CreateTimer(context.Context, *CreateTimerReq) (*CreateTimerRsp, error)
	// EnableTimer 激活定时器
	EnableTimer(context.Context, *EnableTimerReq) (*EnableTimerRsp, error)
	// DisableTimer 去激活定时器
	DisableTimer(context.Context, *DisableTimerReq) (*DisableTimerRsp, error)
	// GetTimerDef 获取定时器定义
	GetTimerDef(context.Context, *GetTimerDefReq) (*GetTimerDefRsp, error)
	// DeleteTimerDef 删除定时器定义
	DeleteTimerDef(context.Context, *DeleteTimerDefReq) (*DeleteTimerDefRsp, error)
	// GetTimerDefList 获取定时器列表
	GetTimerDefList(context.Context, *GetTimerDefListReq) (*GetTimerDefListRsp, error)
	// GetRunHistoryList 获取定时器执行列表
	GetRunHistoryList(context.Context, *GetRunHistoryListReq) (*GetRunHistoryListRsp, error)
	// CreateApp 创建APP
	CreateApp(context.Context, *CreateAppReq) (*CreateAppRsp, error)
	// DeleteApp 删除App
	DeleteApp(context.Context, *DeleteAppReq) (*DeleteAppRsp, error)
	// GetAppList 获取App列表
	GetAppList(context.Context, *GetAppListReq) (*GetAppListRsp, error)
	mustEmbedUnimplementedEndpointServer()
}

// UnimplementedEndpointServer must be embedded to have forward compatible implementations.
type UnimplementedEndpointServer struct {
}

func (UnimplementedEndpointServer) CreateTimer(context.Context, *CreateTimerReq) (*CreateTimerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTimer not implemented")
}
func (UnimplementedEndpointServer) EnableTimer(context.Context, *EnableTimerReq) (*EnableTimerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableTimer not implemented")
}
func (UnimplementedEndpointServer) DisableTimer(context.Context, *DisableTimerReq) (*DisableTimerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableTimer not implemented")
}
func (UnimplementedEndpointServer) GetTimerDef(context.Context, *GetTimerDefReq) (*GetTimerDefRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimerDef not implemented")
}
func (UnimplementedEndpointServer) DeleteTimerDef(context.Context, *DeleteTimerDefReq) (*DeleteTimerDefRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTimerDef not implemented")
}
func (UnimplementedEndpointServer) GetTimerDefList(context.Context, *GetTimerDefListReq) (*GetTimerDefListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimerDefList not implemented")
}
func (UnimplementedEndpointServer) GetRunHistoryList(context.Context, *GetRunHistoryListReq) (*GetRunHistoryListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunHistoryList not implemented")
}
func (UnimplementedEndpointServer) CreateApp(context.Context, *CreateAppReq) (*CreateAppRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedEndpointServer) DeleteApp(context.Context, *DeleteAppReq) (*DeleteAppRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedEndpointServer) GetAppList(context.Context, *GetAppListReq) (*GetAppListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppList not implemented")
}
func (UnimplementedEndpointServer) mustEmbedUnimplementedEndpointServer() {}

// UnsafeEndpointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EndpointServer will
// result in compilation errors.
type UnsafeEndpointServer interface {
	mustEmbedUnimplementedEndpointServer()
}

func RegisterEndpointServer(s grpc.ServiceRegistrar, srv EndpointServer) {
	s.RegisterService(&_Endpoint_serviceDesc, srv)
}

func _Endpoint_CreateTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTimerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).CreateTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timer.Endpoint/CreateTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).CreateTimer(ctx, req.(*CreateTimerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_EnableTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableTimerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).EnableTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timer.Endpoint/EnableTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).EnableTimer(ctx, req.(*EnableTimerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_DisableTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableTimerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).DisableTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timer.Endpoint/DisableTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).DisableTimer(ctx, req.(*DisableTimerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_GetTimerDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimerDefReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).GetTimerDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timer.Endpoint/GetTimerDef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).GetTimerDef(ctx, req.(*GetTimerDefReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_DeleteTimerDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTimerDefReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).DeleteTimerDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timer.Endpoint/DeleteTimerDef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).DeleteTimerDef(ctx, req.(*DeleteTimerDefReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_GetTimerDefList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimerDefListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).GetTimerDefList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timer.Endpoint/GetTimerDefList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).GetTimerDefList(ctx, req.(*GetTimerDefListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_GetRunHistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunHistoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).GetRunHistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timer.Endpoint/GetRunHistoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).GetRunHistoryList(ctx, req.(*GetRunHistoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timer.Endpoint/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).CreateApp(ctx, req.(*CreateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timer.Endpoint/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).DeleteApp(ctx, req.(*DeleteAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_GetAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).GetAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timer.Endpoint/GetAppList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).GetAppList(ctx, req.(*GetAppListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Endpoint_serviceDesc = grpc.ServiceDesc{
	ServiceName: "timer.Endpoint",
	HandlerType: (*EndpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTimer",
			Handler:    _Endpoint_CreateTimer_Handler,
		},
		{
			MethodName: "EnableTimer",
			Handler:    _Endpoint_EnableTimer_Handler,
		},
		{
			MethodName: "DisableTimer",
			Handler:    _Endpoint_DisableTimer_Handler,
		},
		{
			MethodName: "GetTimerDef",
			Handler:    _Endpoint_GetTimerDef_Handler,
		},
		{
			MethodName: "DeleteTimerDef",
			Handler:    _Endpoint_DeleteTimerDef_Handler,
		},
		{
			MethodName: "GetTimerDefList",
			Handler:    _Endpoint_GetTimerDefList_Handler,
		},
		{
			MethodName: "GetRunHistoryList",
			Handler:    _Endpoint_GetRunHistoryList_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _Endpoint_CreateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _Endpoint_DeleteApp_Handler,
		},
		{
			MethodName: "GetAppList",
			Handler:    _Endpoint_GetAppList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timer_endpoint.proto",
}
